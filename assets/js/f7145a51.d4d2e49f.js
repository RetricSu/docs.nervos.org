"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[985],{8254:(e,n,t)=>{t.d(n,{Ay:()=>s});var r=t(4848),a=t(8453);function o(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"So now your app works great on the local blockchain, you might want to switch it to different environments like Testnet and mainnet."}),"\n",(0,r.jsx)(n.p,{children:"To do this, you need to update the chain config and related code."}),"\n",(0,r.jsxs)(n.p,{children:["Open the ",(0,r.jsx)(n.code,{children:"ckb.ts"})," in your project root dir, change the ",(0,r.jsx)(n.code,{children:"lumosConfig"})," and ",(0,r.jsx)(n.code,{children:"CKB_RPC_URL"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"//export const lumosConfig: config.Config = devConfig as config.Config;\nexport const lumosConfig = config.predefined.AGGRON4 as config.Config;\n\n//export const CKB_RPC_URL = 'http://localhost:8114';\nexport const CKB_RPC_URL = \"https://testnet.ckb.dev/rpc\";\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Acutally, we have the corresponding Testnet version examples for all these tutorials. The source code of the Testnet version is in ",(0,r.jsx)(n.a,{href:"https://github.com/nervosnetwork/docs.nervos.org/tree/develop-v2/examples",children:"https://github.com/nervosnetwork/docs.nervos.org/tree/develop-v2/examples"}),", you can clone the repo and start running on Testnet."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"git clone https://github.com/nervosnetwork/docs.nervos.org.git\ncd docs.nervos.org.git/examples/<example-name>\nyarn && yarn start\n"})}),"\n",(0,r.jsxs)(n.p,{children:["For more details, check out the ",(0,r.jsx)(n.a,{href:"https://github.com/nervosnetwork/docs.nervos.org/blob/develop-v2/examples/simple-transfer/README.md",children:"README.md"}),";"]})]})}function s(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},2875:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>f,frontMatter:()=>i,metadata:()=>d,toc:()=>h});var r=t(4848),a=t(8453),o=t(9496),s=t(5683),c=t(8254);const i={id:"create-dob",title:"Create a DOB",sidebar_position:6},l="Create an On-Chain Digital Object via Spore Protocol",d={id:"dapps/create-dob",title:"Create a DOB",description:"<TutorialHeader",source:"@site/docs/dapps/create-dob.mdx",sourceDirName:"dapps",slug:"/dapps/create-dob",permalink:"/docs/dapps/create-dob",draft:!1,unlisted:!1,editUrl:"https://github.com/nervosnetwork/docs-new/tree/develop-v2/website/docs/dapps/create-dob.mdx",tags:[],version:"current",lastUpdatedAt:1712118446,formattedLastUpdatedAt:"Apr 3, 2024",sidebarPosition:6,frontMatter:{id:"create-dob",title:"Create a DOB",sidebar_position:6},sidebar:"tutorial",previous:{title:"Issue Token",permalink:"/docs/dapps/issue-token"},next:{title:"Dev Tools",permalink:"/docs/dapps/devtool"}},u={},h=[{value:"Spore Protocol on CKB",id:"spore-protocol-on-ckb",level:2},{value:"Setup Devnet &amp; Run Example",id:"setup-devnet--run-example",level:2},{value:"Behind the Scene",id:"behind-the-scene",level:2},{value:"Create Digital Object",id:"create-digital-object",level:3},{value:"Render Content from Digital Object",id:"render-content-from-digital-object",level:3},{value:"Congratulations!",id:"congratulations",level:2},{value:"Next Step",id:"next-step",level:2},{value:"Additional Resources",id:"additional-resources",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"create-an-on-chain-digital-object-via-spore-protocol",children:"Create an On-Chain Digital Object via Spore Protocol"}),"\n",(0,r.jsx)(o.A,{estimateTime:"2 \u2013 5 min",whatYouWillLearn:["How Spore protocol works on CKB","Create a on-chain digital object with a picture via Spore-sdk","Render the picture in browser from your digital object"]}),"\n",(0,r.jsx)(n.h2,{id:"spore-protocol-on-ckb",children:"Spore Protocol on CKB"}),"\n",(0,r.jsx)(n.p,{children:'Spore is an on-chain digital object(DOB) protocol backed by CKB. An "on-chain" asset refers to a digital asset whose data is directly encoded onto the blockchain. A spore cell can hold any type of assets users want to store on-chain, the following data structure is used in the spore cell:'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'data:\n    content-type: Bytes # String Bytes\n    content: Bytes\n    # OPTIONAL\n    cluster_id: Bytes\ntype:\n    hash_type: "data1"\n    code_hash: SPORE_TYPE_DATA_HASH\n    args: SPORE_ID\nlock:\n    <user_defined>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Notice that the data field of the spore cell contains ",(0,r.jsx)(n.code,{children:"content-type"})," and ",(0,r.jsx)(n.code,{children:"content"}),", which allow users to turn any content form into a digital object. All the fields in a Spore Cell are immutable once created."]}),"\n",(0,r.jsx)(n.p,{children:"In this tutorial, we will build a simple Dapp to turn a picture on your computer into a digital object on the blockchain using the spore SDK."}),"\n",(0,r.jsx)(n.h2,{id:"setup-devnet--run-example",children:"Setup Devnet & Run Example"}),"\n",(0,r.jsx)(s.A,{templateName:"create-dob",imageSrc:"img/dapps/create-dob-dapp.jpg"}),"\n",(0,r.jsx)(n.h2,{id:"behind-the-scene",children:"Behind the Scene"}),"\n",(0,r.jsxs)(n.p,{children:["Open the ",(0,r.jsx)(n.code,{children:"lib.ts"})," file in your project, it lists all the important functions that do the most of work for the project."]}),"\n",(0,r.jsx)(n.h3,{id:"create-digital-object",children:"Create Digital Object"}),"\n",(0,r.jsxs)(n.p,{children:["Check out the ",(0,r.jsx)(n.code,{children:"createSporeDOB"})," function:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"export async function createSporeDOB(\n  privkey: string,\n  content: Uint8Array\n): Promise<{ txHash: string; outputIndex: number }>;\n"})}),"\n",(0,r.jsx)(n.p,{children:"It accepts two parameters,"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"the private key that is used to sign and create the digital object"}),"\n",(0,r.jsx)(n.li,{children:"the content to be stored in the digital object."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The content can be any type of data that is serialized into a ",(0,r.jsx)(n.code,{children:"Uint8Array"}),". Here we are dealing with images, so the content is the result of ",(0,r.jsx)(n.code,{children:"FileReader.readAsArrayBuffer"}),". You can check out the following code recipe in ",(0,r.jsx)(n.code,{children:"handleFileChange"})," function from the react frontend ",(0,r.jsx)(n.code,{children:"index.tsx"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const reader = new FileReader();\nreader.onload = () => {\n  // Access the file content here\n  const content = reader.result;\n  if (content && content instanceof ArrayBuffer) {\n    const uint8Array = new Uint8Array(content);\n    setFileContent(uint8Array);\n  }\n};\n// Read the file as ArrayBuffer\nreader.readAsArrayBuffer(files[0]);\n"})}),"\n",(0,r.jsx)(n.p,{children:"Once we have the picture content and the private key, we will build a transaction that produces a spore output cell, aka the digital object cell. We can handle all the logic with Lumos.js, but with the help of Spore-SDK, it becomes very simple to do:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'export async function createSporeDOB(\n  privkey: string,\n  content: Uint8Array\n): Promise<{ txHash: string; outputIndex: number }> {\n  const wallet = createDefaultLockWallet(privkey);\n\n  const { txSkeleton, outputIndex } = await createSpore({\n    data: {\n      contentType: "image/jpeg",\n      content,\n    },\n    toLock: wallet.lock,\n    fromInfos: [wallet.address],\n    config: SPORE_CONFIG,\n  });\n\n  const txHash = await wallet.signAndSendTransaction(txSkeleton);\n  console.log(`Spore created at transaction: ${txHash}`);\n  console.log(\n    `Spore ID: ${\n      txSkeleton.get("outputs").get(outputIndex)!.cellOutput.type!.args\n    }`\n  );\n  return { txHash, outputIndex };\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Notice that the ",(0,r.jsx)(n.code,{children:"createDefaultLockWallet"})," and ",(0,r.jsx)(n.code,{children:"const txHash = await wallet.signAndSendTransaction(txSkeleton);"})," are just some methods that helps us to keep the code clean, all it does is the same as the previous tutorials involving signing and sending transactions."]}),"\n",(0,r.jsx)(n.h3,{id:"render-content-from-digital-object",children:"Render Content from Digital Object"}),"\n",(0,r.jsx)(n.p,{children:"Once we created our digital object on-chain, what we love to do is to render and show this digital object. To do this, we need to first find the spore cell of our digital object and extract the data from the spore cell and decode the content from the data to render it in the browser."}),"\n",(0,r.jsxs)(n.p,{children:["Check out the ",(0,r.jsx)(n.code,{children:"showSporeContent"})," function:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'export async function showSporeContent(txHash: string, index = 0) {\n  const indexHex = "0x" + index.toString(16);\n  const { cell } = await rpc.getLiveCell({ txHash, index: indexHex }, true);\n  if (cell == null) {\n    return alert("cell not found, please retry later");\n  }\n  const data = cell.data.content;\n  const msg = unpackToRawSporeData(data);\n  console.log("spore data: ", msg);\n  return msg;\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["We locate the spore cell by accepting a outpoint parameter(",(0,r.jsx)(n.code,{children:"txHash"})," and ",(0,r.jsx)(n.code,{children:"outputIndex"}),"), and use ",(0,r.jsx)(n.code,{children:"rpc.getLiveCell"})," to get the live cell. Then we unpack the data content from this cell:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const data = cell.data.content;\nconst msg = unpackToRawSporeData(data);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["To render the image from this raw data, check out the ",(0,r.jsx)(n.code,{children:"renderSpore"})," function in the ",(0,r.jsx)(n.code,{children:"index.tsx"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const renderSpore = async () => {\n  const res = await showSporeContent(txHash, outputIndex);\n  if (!res) return;\n  setRawSporeData(res);\n  // Create Blob from binary data\n  const buffer = hexStringToUint8Array(res.content.toString().slice(2));\n  const blob = new Blob([buffer], { type: res.contentType });\n  const url = URL.createObjectURL(blob);\n  setImageURL(url);\n};\n\n...\n{imageURL && <img src={imageURL} />}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"congratulations",children:"Congratulations!"}),"\n",(0,r.jsx)(n.p,{children:"By following this tutorial this far, you have mastered how digital-object works on CKB. Here's a quick recap:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"How Spore protocol works on CKB"}),"\n",(0,r.jsx)(n.li,{children:"Create an on-chain digital object with a picture via Spore-sdk"}),"\n",(0,r.jsx)(n.li,{children:"Render the picture in the browser from your digital object"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"next-step",children:"Next Step"}),"\n",(0,r.jsx)(c.Ay,{}),"\n",(0,r.jsx)(n.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Spore protocol: ",(0,r.jsx)(n.a,{href:"https://docs.spore.pro/",children:"docs.spore.pro"})]}),"\n",(0,r.jsxs)(n.li,{children:["CKB transaction structure: ",(0,r.jsx)(n.a,{href:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0022-transaction-structure/0022-transaction-structure.md",children:"RFC-0022-transaction-structure"})]}),"\n",(0,r.jsxs)(n.li,{children:["CKB data structure basics: ",(0,r.jsx)(n.a,{href:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0019-data-structures/0019-data-structures.md",children:"RFC-0019-data-structure"}),"\n./SetupProject.js\n./SetupProject.js\n./SetupProject.js"]}),"\n"]})]})}function f(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},5683:(e,n,t)=>{t.d(n,{A:()=>u});var r=t(6540),a=t(4848),o=t(8453),s=t(1470),c=t(9365),i=t(6025);function l(e){const n={a:"a",code:"code",h3:"h3",hr:"hr",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["To begin, you'll need to install ",(0,a.jsx)(n.code,{children:"@offckb/cli"})," to establish a local dev environment and initialize the project."]}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsx)(c.A,{value:"offckb-install",label:"Command",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install -g @offckb/cli\n"})})}),(0,a.jsx)(c.A,{value:"offckb-install-result",label:"Response",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"changed 106 packages in 17s\n\n11 packages are looking for funding\nrun `npm fund` for details\n"})})})]}),"\n",(0,a.jsxs)(n.p,{children:["Use ",(0,a.jsx)(n.code,{children:"offckb"})," to select the ",(0,a.jsx)("code",{children:e.templateName})," template to init the project to your local environment"]}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsx)(c.A,{value:"offckb-init",label:"Command",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"offckb init <project-name>\n"})})}),(0,a.jsx)(c.A,{value:"offckb-init-result",label:"Response",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"? Select a dapp template (Use arrow keys)\n  View and Transfer Balance\n  Issue Token via xUDT scripts\n\u276f Write and Read On-Chain Message\na simple dapp to write and read text message from blockchain via storing it in cells\ninit CKB dapp project: /Users/ckb/Desktop/offckb/<project-name>\n\u2728  Done in 2.52s.\n"})})})]}),"\n",(0,a.jsx)(n.p,{children:"Install node dependencies and start the example app:"}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsx)(c.A,{value:"offckb-yarn-start",label:"Command",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cd <project-name> && yarn && yarn start\n"})})}),(0,a.jsx)(c.A,{value:"offckb-yarn-start-result",label:"Response",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"$ parcel index.html\nServer running at http://localhost:1234\n\u2728 Built in 66ms\n"})})})]}),"\n",(0,a.jsxs)(n.p,{children:["Now, the app is running in ",(0,a.jsx)(n.a,{href:"http://localhost:1234",children:"http://localhost:1234"})]}),"\n",(0,a.jsx)("img",{src:(0,i.A)(e.imageSrc)}),"\n",(0,a.jsx)(n.h3,{id:"start-the-devnet",children:"Start the Devnet"}),"\n",(0,a.jsx)(n.p,{children:"In order to interact with the app, you need to start the devnet and check some accounts to use."}),"\n",(0,a.jsx)(n.p,{children:"Open one terminal and start the devnet:"}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsx)(c.A,{value:"offckb-node",label:"Command",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"offckb node\n"})})}),(0,a.jsx)(c.A,{value:"offckb-node-result",label:"Response",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"/bin/sh: /Users/nervosDocs/.nvm/versions/node/v18.12.1/lib/node_modules/@offckb/cli/target/ckb/ckb: No such file or directory\n/Users/nervosDocs/.nvm/versions/node/v18.12.1/lib/node_modules/@offckb/cli/target/ckb/ckb not found, download and install the new version 0.113.1..\nCKB installed successfully.\ninit devnet config folder: /Users/nervosDocs/.nvm/versions/node/v18.12.1/lib/node_modules/@offckb/cli/target/devnet\nmodified  /Users/nervosDocs/.nvm/versions/node/v18.12.1/lib/node_modules/@offckb/cli/target/devnet/ckb-miner.toml\nCKB output: 2024-03-20 07:56:44.765 +00:00 main INFO sentry  sentry is disabled\n\nCKB output: 2024-03-20 07:56:44.766 +00:00 main INFO ckb_bin::helper  raise_fd_limit newly-increased limit: 61440\n\nCKB output: 2024-03-20 07:56:44.854 +00:00 main INFO ckb_bin::subcommand::run  ckb version: 0.113.1 (95ad24b 2024-01-31)\n\nCKB output: 2024-03-20 07:56:45.320 +00:00 main INFO ckb_db_migration  Init database version 20230206163640\n\nCKB output: 2024-03-20 07:56:45.329 +00:00 main INFO ckb_launcher  Touch chain spec hash: Byte32(0x3036c73473a371f3aa61c588c38924a93fb8513e481fa7c8d884fc4cf5fd368a)\n"})})})]}),"\n",(0,a.jsx)(n.p,{children:"Open another terminal and check some pre-funded accounts, copy some private keys for later usage:"}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsx)(c.A,{value:"offckb-accounts",label:"Command",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"offckb accounts\n"})})}),(0,a.jsx)(c.A,{value:"offckb-accounts-result",label:"Response",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"Print account list, each account is funded with 42_000_000_00000000 capacity in the genesis block.\n[\n  {\n    privkey: '0x6109170b275a09ad54877b82f7d9930f88cab5717d484fb4741ae9d1dd078cd6',\n    pubkey: '0x02025fa7b61b2365aa459807b84df065f1949d58c0ae590ff22dd2595157bffefa',\n    lockScript: {\n      codeHash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',\n      hashType: 'type',\n      args: '0x8e42b1999f265a0078503c4acec4d5e134534297'\n    },\n    address: 'ckt1qzda0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsqvwg2cen8extgq8s5puft8vf40px3f599cytcyd8',\n    args: '0x8e42b1999f265a0078503c4acec4d5e134534297'\n  },\n  {\n    privkey: '0x9f315d5a9618a39fdc487c7a67a8581d40b045bd7a42d83648ca80ef3b2cb4a1',\n    pubkey: '0x026efa0579f09cc7c1129b78544f70098c90b2ab155c10746316f945829c034a2d',\n    lockScript: {\n      codeHash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',\n      hashType: 'type',\n      args: '0x758d311c8483e0602dfad7b69d9053e3f917457d'\n    },\n    address: 'ckt1qzda0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsqt435c3epyrupszm7khk6weq5lrlyt52lg48ucew',\n    args: '0x758d311c8483e0602dfad7b69d9053e3f917457d'\n  },\n  #... \n]\n"})})})]}),"\n",(0,a.jsx)(n.hr,{})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}const u=function(e){return(0,r.createElement)(d,e)}},9365:(e,n,t)=>{t.d(n,{A:()=>s});t(6540);var r=t(8215);const a={tabItem:"tabItem_Ymn6"};var o=t(4848);function s(e){var n=e.children,t=e.hidden,s=e.className;return(0,o.jsx)("div",{role:"tabpanel",className:(0,r.A)(a.tabItem,s),hidden:t,children:n})}},1470:(e,n,t)=>{t.d(n,{A:()=>k});var r=t(6540),a=t(8215),o=t(3104),s=t(6347),c=t(205),i=t(7485),l=t(1682),d=t(9466);function u(e){var n,t;return null!=(n=null==(t=r.Children.toArray(e).filter((function(e){return"\n"!==e})).map((function(e){if(!e||(0,r.isValidElement)(e)&&((n=e.props)&&"object"==typeof n&&"value"in n))return e;var n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:t.filter(Boolean))?n:[]}function h(e){var n=e.values,t=e.children;return(0,r.useMemo)((function(){var e=null!=n?n:function(e){return u(e).map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes,default:n.default}}))}(t);return function(e){var n=(0,l.X)(e,(function(e,n){return e.value===n.value}));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,t])}function p(e){var n=e.value;return e.tabValues.some((function(e){return e.value===n}))}function f(e){var n=e.queryString,t=void 0!==n&&n,a=e.groupId,o=(0,s.W6)(),c=function(e){var n=e.queryString,t=void 0!==n&&n,r=e.groupId;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=r?r:null}({queryString:t,groupId:a});return[(0,i.aZ)(c),(0,r.useCallback)((function(e){if(c){var n=new URLSearchParams(o.location.search);n.set(c,e),o.replace(Object.assign({},o.location,{search:n.toString()}))}}),[c,o])]}function b(e){var n,t,a,o,s=e.defaultValue,i=e.queryString,l=void 0!==i&&i,u=e.groupId,b=h(e),x=(0,r.useState)((function(){return function(e){var n,t=e.defaultValue,r=e.tabValues;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:r}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+t+'" but none of its children has the corresponding value. Available values are: '+r.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return t}var a=null!=(n=r.find((function(e){return e.default})))?n:r[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:s,tabValues:b})})),m=x[0],g=x[1],j=f({queryString:l,groupId:u}),v=j[0],y=j[1],k=(n=function(e){return e?"docusaurus.tab."+e:null}({groupId:u}.groupId),t=(0,d.Dv)(n),a=t[0],o=t[1],[a,(0,r.useCallback)((function(e){n&&o.set(e)}),[n,o])]),w=k[0],C=k[1],A=function(){var e=null!=v?v:w;return p({value:e,tabValues:b})?e:null}();return(0,c.A)((function(){A&&g(A)}),[A]),{selectedValue:m,selectValue:(0,r.useCallback)((function(e){if(!p({value:e,tabValues:b}))throw new Error("Can't select invalid tab value="+e);g(e),y(e),C(e)}),[y,C,b]),tabValues:b}}var x=t(2303);const m={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=t(4848);function j(e){var n=e.className,t=e.block,r=e.selectedValue,s=e.selectValue,c=e.tabValues,i=[],l=(0,o.a_)().blockElementScrollPositionUntilNextRender,d=function(e){var n=e.currentTarget,t=i.indexOf(n),a=c[t].value;a!==r&&(l(n),s(a))},u=function(e){var n,t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":var r,a=i.indexOf(e.currentTarget)+1;t=null!=(r=i[a])?r:i[0];break;case"ArrowLeft":var o,s=i.indexOf(e.currentTarget)-1;t=null!=(o=i[s])?o:i[i.length-1]}null==(n=t)||n.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},n),children:c.map((function(e){var n=e.value,t=e.label,o=e.attributes;return(0,g.jsx)("li",Object.assign({role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:function(e){return i.push(e)},onKeyDown:u,onClick:d},o,{className:(0,a.A)("tabs__item",m.tabItem,null==o?void 0:o.className,{"tabs__item--active":r===n}),children:null!=t?t:n}),n)}))})}function v(e){var n=e.lazy,t=e.children,a=e.selectedValue,o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){var s=o.find((function(e){return e.props.value===a}));return s?(0,r.cloneElement)(s,{className:"margin-top--md"}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:o.map((function(e,n){return(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a})}))})}function y(e){var n=b(e);return(0,g.jsxs)("div",{className:(0,a.A)("tabs-container",m.tabList),children:[(0,g.jsx)(j,Object.assign({},e,n)),(0,g.jsx)(v,Object.assign({},e,n))]})}function k(e){var n=(0,x.A)();return(0,g.jsx)(y,Object.assign({},e,{children:u(e.children)}),String(n))}},9496:(e,n,t)=>{t.d(n,{A:()=>s});const r={box:"box_OmWe",bold:"bold_xF78",estimateTime:"estimateTime_dfR_"};var a=t(53),o=t(4848);function s(e){var n=e.estimateTime,t=e.whatYouWillLearn;return(0,o.jsxs)("div",{className:r.box,children:[(0,o.jsxs)("div",{className:(0,a.A)(r.estimateTime,r.bold),children:["Estimated time: ",n]}),(0,o.jsx)("div",{className:r.bold,children:"What you\u2019ll learn:"}),(0,o.jsx)("ul",{children:t.map((function(e){return(0,o.jsx)("li",{children:e},e)}))})]})}},53:(e,n,t)=>{function r(e){var n,t,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=r(e[n]))&&(a&&(a+=" "),a+=t);else for(n in e)e[n]&&(a&&(a+=" "),a+=n);return a}function a(){for(var e,n,t=0,a="";t<arguments.length;)(e=arguments[t++])&&(n=r(e))&&(a&&(a+=" "),a+=n);return a}t.d(n,{A:()=>a})},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var r=t(6540);const a={},o=r.createContext(a);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);