"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[144],{4656:(e,n,t)=>{t.d(n,{Ay:()=>c});var s=t(4848),a=t(8453);function r(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"So now your app works great on the local blockchain, you might want to switch it to different environments like Testnet and mainnet."}),"\n",(0,s.jsx)(n.p,{children:"To do this, you need to update the chain config and related code."}),"\n",(0,s.jsxs)(n.p,{children:["Open the ",(0,s.jsx)(n.code,{children:"ckb.ts"})," in your project root dir, change the ",(0,s.jsx)(n.code,{children:"lumosConfig"})," and ",(0,s.jsx)(n.code,{children:"CKB_RPC_URL"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"//export const lumosConfig: config.Config = devConfig as config.Config;\nexport const lumosConfig = config.predefined.AGGRON4 as config.Config;\n\n//export const CKB_RPC_URL = 'http://localhost:8114';\nexport const CKB_RPC_URL = \"https://testnet.ckb.dev/rpc\";\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Acutally, we have the corresponding Testnet version examples for all these tutorials. The source code of the Testnet version is in ",(0,s.jsx)(n.a,{href:"https://github.com/nervosnetwork/docs.nervos.org/tree/develop-v2/examples",children:"https://github.com/nervosnetwork/docs.nervos.org/tree/develop-v2/examples"}),", you can clone the repo and start running on Testnet."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"git clone https://github.com/nervosnetwork/docs.nervos.org.git\ncd docs.nervos.org.git/examples/<example-name>\nyarn && yarn start\n"})}),"\n",(0,s.jsxs)(n.p,{children:["For more details, check out the ",(0,s.jsx)(n.a,{href:"https://github.com/nervosnetwork/docs.nervos.org/blob/develop-v2/examples/simple-transfer/README.md",children:"README.md"}),";"]})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}},6219:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>f,frontMatter:()=>i,metadata:()=>d,toc:()=>h});var s=t(4848),a=t(8453),r=t(8652),c=t(3102),o=t(4656);const i={id:"transfer-balance",title:"Transfer Balance",sidebar_position:2},l="View and Transfer Balance",d={id:"dapps/transfer-balance",title:"Transfer Balance",description:"<TutorialHeader",source:"@site/docs/dapps/transfer-balance.mdx",sourceDirName:"dapps",slug:"/dapps/transfer-balance",permalink:"/docs/dapps/transfer-balance",draft:!1,unlisted:!1,editUrl:"https://github.com/nervosnetwork/docs-new/tree/develop-v2/website/docs/dapps/transfer-balance.mdx",tags:[],version:"current",lastUpdatedAt:1712119922,formattedLastUpdatedAt:"Apr 3, 2024",sidebarPosition:2,frontMatter:{id:"transfer-balance",title:"Transfer Balance",sidebar_position:2},sidebar:"tutorial",previous:{title:"DApps",permalink:"/docs/"},next:{title:"Write Message",permalink:"/docs/dapps/write-message"}},u={},h=[{value:"How Transaction Works",id:"how-transaction-works",level:2},{value:"Setup Devnet &amp; Run Example",id:"setup-devnet--run-example",level:2},{value:"Behind the Scene",id:"behind-the-scene",level:2},{value:"Congratulations!",id:"congratulations",level:2},{value:"Next Step",id:"next-step",level:2},{value:"Additional Resources",id:"additional-resources",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"view-and-transfer-balance",children:"View and Transfer Balance"}),"\n",(0,s.jsx)(r.A,{estimateTime:"2 \u2013 5 min",whatYouWillLearn:["How to transfer CKB from one account to another","Build a basic transaction","How to sign a transaction"]}),"\n",(0,s.jsx)(n.h2,{id:"how-transaction-works",children:"How Transaction Works"}),"\n",(0,s.jsx)(n.p,{children:"CKB is based on UTXO-like cell model. Every cell has a capacity limit which represents the CKB balance and how much data can be stored in this cell at the same time. Cell can store any type of data."}),"\n",(0,s.jsx)(n.p,{children:"A transaction in CKB works just like Bitcoin. Each transaction is consuming some input cells and producing some new output cells. Notice that the output cells's total capacities can not be larger than the one from the input cells. Similar with how the UTXOs is transfer and converted in Bitcoin."}),"\n",(0,s.jsx)(n.h2,{id:"setup-devnet--run-example",children:"Setup Devnet & Run Example"}),"\n",(0,s.jsx)(c.A,{templateName:"view-and-transfer-balance",imageSrc:"img/dapps/transfer-dapp.jpg"}),"\n",(0,s.jsx)(n.h2,{id:"behind-the-scene",children:"Behind the Scene"}),"\n",(0,s.jsxs)(n.p,{children:["Open the ",(0,s.jsx)(n.code,{children:"lib.ts"})," file in your project and check out the ",(0,s.jsx)(n.code,{children:"generateAccountFromPrivateKey"})," function:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'export const generateAccountFromPrivateKey = (privKey: string): Account => {\n  const pubKey = hd.key.privateToPublic(privKey);\n  const args = hd.key.publicKeyToBlake160(pubKey);\n  const template = lumosConfig.SCRIPTS["SECP256K1_BLAKE160"]!;\n  const lockScript = {\n    codeHash: template.CODE_HASH,\n    hashType: template.HASH_TYPE,\n    args: args,\n  };\n  const address = helpers.encodeToAddress(lockScript, { config: lumosConfig });\n  return {\n    lockScript,\n    address,\n    pubKey,\n  };\n};\n'})}),"\n",(0,s.jsx)(n.p,{children:"What this function does is to generate the account's public key and address via a private key. Here, we need to construct and encode a lock script to get the corresponding address of this account. A lock script ensures that only the owner can consume their live cells."}),"\n",(0,s.jsx)(n.p,{children:"Here, we use the CKB standard lock script template combining the SECP256K1 signing algorithm with the BLAKE160 hashing algorithm to build such a lock script. Notice that different templates will yield different addresses when encoding the address, corresponding to different type of guard for the assets."}),"\n",(0,s.jsx)(n.p,{children:"Once we get the lock script of a account, we can know how much balance the account has. The calculation is very simple, we query and find all the cells that uses the same lock script and sum all these cells's capacity, the amount is the balance."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export async function capacityOf(address: string): Promise<BI> {\n  const collector = indexer.collector({\n    lock: helpers.parseAddress(address, { config: lumosConfig }),\n  });\n\n  let balance = BI.from(0);\n  for await (const cell of collector.collect()) {\n    balance = balance.add(cell.cellOutput.capacity);\n  }\n\n  return balance;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"In Nervos CKB, Shannon is the smallest currency unit, with 1 CKB equaling 10^8 Shannon. This unit system is similar to Bitcoin's Satoshis, where 1 Bitcoin = 10^8 Satoshis. Notice that in this tutorial we only use Shannon unit."}),"\n",(0,s.jsxs)(n.p,{children:["Next, we can start transfer balance. Check out the ",(0,s.jsx)(n.code,{children:"transfer"})," function in ",(0,s.jsx)(n.code,{children:"lib.ts"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"//CKB To Shannon\ninterface Options {\n  from: string;\n  to: string;\n  amount: string;\n  privKey: string;\n}\n\nexport async function transfer(options: Options): Promise<string>;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"transfer"})," function accepts a ",(0,s.jsx)(n.code,{children:"Option"})," parameter which includes necessary info about the transfer such as fromAddress/toAddress/amount and the private key to sign the transfer transaction."]}),"\n",(0,s.jsx)(n.p,{children:"What this transfer transaction will do is that it collects and consumes as much as the amount capacities needed with some live cells as the input cells and produce some new output cells where the lock script of all these new cells are set to the new owner's lock script for other account. In this way, the CKB balance are transferred from one account to another with the dying and the birthing of cells."}),"\n",(0,s.jsxs)(n.p,{children:["Next, let's build the transaction for transferring balance. The first step is to create an empty ",(0,s.jsx)(n.code,{children:"txSkeleton"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"let txSkeleton = helpers.TransactionSkeleton({});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Then we determine the total capacities required for our transaction including ",(0,s.jsx)(n.code,{children:"Transfer Amount + Transaction Fee"}),", here we set the transaction fee as ",(0,s.jsx)(n.code,{children:"100000"})," Shannon."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const neededCapacity = BI.from(options.amount).add(100000);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Then we retrieve the sender account's assets from blockchain RPC with the help of ",(0,s.jsx)(n.code,{children:"indexer"})," and collect the transaction's inputs cells"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const fromScript = helpers.parseAddress(options.from, {\n  config: lumosConfig,\n});\n\nlet collectedSum = BI.from(0);\nconst collected: Cell[] = [];\nconst collector = indexer.collector({ lock: fromScript, type: "empty" });\nfor await (const cell of collector.collect()) {\n  collectedSum = collectedSum.add(cell.cellOutput.capacity);\n  collected.push(cell);\n  if (collectedSum >= neededCapacity) break;\n}\n\nif (collectedSum.lt(neededCapacity)) {\n  throw new Error(`Not enough CKB, ${collectedSum} < ${neededCapacity}`);\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Now lets create the transaction's output cells. ",(0,s.jsx)(n.code,{children:"transferOutput"})," is generated based on the amount the user wishes to transfer, and ",(0,s.jsx)(n.code,{children:"changeOutput"})," is the left change after the transaction."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const toScript = helpers.parseAddress(options.to, { config: lumosConfig });\n\nconst transferOutput: Cell = {\n  cellOutput: {\n    capacity: BI.from(options.amount).toHexString(),\n    lock: toScript,\n  },\n  data: "0x",\n};\n\nconst changeOutput: Cell = {\n  cellOutput: {\n    capacity: collectedSum.sub(neededCapacity).toHexString(),\n    lock: fromScript,\n  },\n  data: "0x",\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Then, we need to add Inputs and Outputs to the created ",(0,s.jsx)(n.code,{children:"txSkeleton"}),". Also added are ",(0,s.jsx)(n.code,{children:"Cell Deps"}),", which contain an ",(0,s.jsx)(n.code,{children:"OutPoint"})," pointing to some specific lived cells, these cells are related to the transaction and can be used like dependencies to place code that will be loaded and executed by the ",(0,s.jsx)(n.code,{children:"CKB-VM"})," or to place data that can be used for on-chain script execution. ",(0,s.jsx)(n.a,{href:"https://something",children:"Detailed explanation"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'txSkeleton = txSkeleton.update("inputs", (inputs) => inputs.push(...collected));\ntxSkeleton = txSkeleton.update("outputs", (outputs) =>\n  outputs.push(transferOutput, changeOutput)\n);\ntxSkeleton = txSkeleton.update("cellDeps", (cellDeps) =>\n  cellDeps.push({\n    outPoint: {\n      txHash: lumosConfig.SCRIPTS.SECP256K1_BLAKE160.TX_HASH,\n      index: lumosConfig.SCRIPTS.SECP256K1_BLAKE160.INDEX,\n    },\n    depType: lumosConfig.SCRIPTS.SECP256K1_BLAKE160.DEP_TYPE,\n  })\n);\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Next, update specific witness data in the transaction. The witness is a place to put data like signature for the transaction to be verified on blockchain. The witness can be used in whatever format you want, but here we follow a ",(0,s.jsx)(n.a,{href:"https://github.com/nervosnetwork/ckb/blob/1df5f2c1cbf07e04622fb8faa5b152c1af7ae341/util/types/schemas/blockchain.mol#L106",children:"WitnessArgs"})," spec for basic transaction structure, notice that this spec can change to apply better practice."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"witnessArgs"})," contains a 3 different parts, corresponding to different data needed for the specific scripts executions:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export interface WitnessArgs {\n  lock?: HexString; // lock scripts of the input cells\n  inputType?: HexString; // type scripts of the input cells\n  outputType?: HexString; // type scripts of the output cells\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"We update the witness part according to the transaction structure."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const firstIndex = txSkeleton\n  .get("inputs")\n  .findIndex((input) =>\n    bytes.equal(\n      blockchain.Script.pack(input.cellOutput.lock),\n      blockchain.Script.pack(fromScript)\n    )\n  );\nif (firstIndex !== -1) {\n  while (firstIndex >= txSkeleton.get("witnesses").size) {\n    txSkeleton = txSkeleton.update("witnesses", (witnesses) =>\n      witnesses.push("0x")\n    );\n  }\n  let witness: string = txSkeleton.get("witnesses").get(firstIndex)!;\n  const newWitnessArgs: WitnessArgs = {\n    /* 65-byte zeros in hex */\n    lock: "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",\n  };\n  if (witness !== "0x") {\n    const witnessArgs = blockchain.WitnessArgs.unpack(bytes.bytify(witness));\n    const lock = witnessArgs.lock;\n    if (\n      !!lock &&\n      !!newWitnessArgs.lock &&\n      !bytes.equal(lock, newWitnessArgs.lock)\n    ) {\n      throw new Error(\n        "Lock field in first witness is set aside for signature!"\n      );\n    }\n    const inputType = witnessArgs.inputType;\n    if (!!inputType) {\n      newWitnessArgs.inputType = inputType;\n    }\n    const outputType = witnessArgs.outputType;\n    if (!!outputType) {\n      newWitnessArgs.outputType = outputType;\n    }\n  }\n  witness = bytes.hexify(blockchain.WitnessArgs.pack(newWitnessArgs));\n  txSkeleton = txSkeleton.update("witnesses", (witnesses) =>\n    witnesses.set(firstIndex, witness)\n  );\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Next, we need to sign the transaction. But before that we will create a signing message."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Generate signingEntries based on the transaction's Inputs and Outputs"}),"\n",(0,s.jsx)(n.li,{children:"Retrieve the signature message"}),"\n",(0,s.jsx)(n.li,{children:"Use the private key to sign the message recoverably, including the signature information and necessary metadata for subsequent signature verification processes"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'txSkeleton = commons.common.prepareSigningEntries(txSkeleton);\nconst message = txSkeleton.get("signingEntries").get(0)?.message;\nconst Sig = hd.key.signRecoverable(message!, options.privKey);\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Now let's seal our transaction with the ",(0,s.jsx)(n.code,{children:"txSkeleton"})," and the just-generated signature"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const tx = helpers.sealTransaction(txSkeleton, [Sig]);\n"})}),"\n",(0,s.jsx)(n.p,{children:"Send the transaction"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const hash = await rpc.sendTransaction(tx, "passthrough");\n'})}),"\n",(0,s.jsx)(n.p,{children:"You can open the console on the browser to see the full transaction to confirm the process."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"congratulations",children:"Congratulations!"}),"\n",(0,s.jsx)(n.p,{children:"By following this tutorial this far, you have mastered how transfer balance works on CKB. Here's a quick recap:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Capacity of the cell means how much CKB balance you have and how much data can be stored in this cell at the same time"}),"\n",(0,s.jsx)(n.li,{children:"To build a CKB transaction is just to collecting some live cells and producing some new cells."}),"\n",(0,s.jsxs)(n.li,{children:["We follow the ",(0,s.jsx)(n.code,{children:"witnessArgs"})," to place the needed signature or any other data in the transaction."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"next-step",children:"Next Step"}),"\n",(0,s.jsx)(o.Ay,{}),"\n",(0,s.jsx)(n.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["CKB transaction structure: ",(0,s.jsx)(n.a,{href:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0022-transaction-structure/0022-transaction-structure.md",children:"RFC-0022-transaction-structure"})]}),"\n",(0,s.jsxs)(n.li,{children:["CKB data structure basics: ",(0,s.jsx)(n.a,{href:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0019-data-structures/0019-data-structures.md",children:"RFC-0019-data-structure"}),"./SetupProjectContent.mdx\n./SetupProject.js\n./SetupProject.js\n./SetupProject.js"]}),"\n"]})]})}function f(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},3102:(e,n,t)=>{t.d(n,{A:()=>u});var s=t(6540),a=t(4848),r=t(8453),c=t(9489),o=t(7227),i=t(8180);function l(e){const n={a:"a",code:"code",h3:"h3",hr:"hr",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["To begin, you'll need to install ",(0,a.jsx)(n.code,{children:"@offckb/cli"})," to establish a local dev environment and initialize the project."]}),"\n",(0,a.jsxs)(c.A,{children:[(0,a.jsx)(o.A,{value:"offckb-install",label:"Command",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install -g @offckb/cli\n"})})}),(0,a.jsx)(o.A,{value:"offckb-install-result",label:"Response",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"changed 106 packages in 17s\n\n11 packages are looking for funding\nrun `npm fund` for details\n"})})})]}),"\n",(0,a.jsxs)(n.p,{children:["Use ",(0,a.jsx)(n.code,{children:"offckb"})," to select the ",(0,a.jsx)("code",{children:e.templateName})," template to init the project to your local environment"]}),"\n",(0,a.jsxs)(c.A,{children:[(0,a.jsx)(o.A,{value:"offckb-init",label:"Command",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"offckb init <project-name>\n"})})}),(0,a.jsx)(o.A,{value:"offckb-init-result",label:"Response",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"? Select a dapp template (Use arrow keys)\n  View and Transfer Balance\n  Issue Token via xUDT scripts\n\u276f Write and Read On-Chain Message\na simple dapp to write and read text message from blockchain via storing it in cells\ninit CKB dapp project: /Users/ckb/Desktop/offckb/<project-name>\n\u2728  Done in 2.52s.\n"})})})]}),"\n",(0,a.jsx)(n.p,{children:"Install node dependencies and start the example app:"}),"\n",(0,a.jsxs)(c.A,{children:[(0,a.jsx)(o.A,{value:"offckb-yarn-start",label:"Command",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cd <project-name> && yarn && yarn start\n"})})}),(0,a.jsx)(o.A,{value:"offckb-yarn-start-result",label:"Response",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"$ parcel index.html\nServer running at http://localhost:1234\n\u2728 Built in 66ms\n"})})})]}),"\n",(0,a.jsxs)(n.p,{children:["Now, the app is running in ",(0,a.jsx)(n.a,{href:"http://localhost:1234",children:"http://localhost:1234"})]}),"\n",(0,a.jsx)("img",{src:(0,i.A)(e.imageSrc)}),"\n",(0,a.jsx)(n.h3,{id:"start-the-devnet",children:"Start the Devnet"}),"\n",(0,a.jsx)(n.p,{children:"In order to interact with the app, you need to start the devnet and check some accounts to use."}),"\n",(0,a.jsx)(n.p,{children:"Open one terminal and start the devnet:"}),"\n",(0,a.jsxs)(c.A,{children:[(0,a.jsx)(o.A,{value:"offckb-node",label:"Command",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"offckb node\n"})})}),(0,a.jsx)(o.A,{value:"offckb-node-result",label:"Response",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"/bin/sh: /Users/nervosDocs/.nvm/versions/node/v18.12.1/lib/node_modules/@offckb/cli/target/ckb/ckb: No such file or directory\n/Users/nervosDocs/.nvm/versions/node/v18.12.1/lib/node_modules/@offckb/cli/target/ckb/ckb not found, download and install the new version 0.113.1..\nCKB installed successfully.\ninit devnet config folder: /Users/nervosDocs/.nvm/versions/node/v18.12.1/lib/node_modules/@offckb/cli/target/devnet\nmodified  /Users/nervosDocs/.nvm/versions/node/v18.12.1/lib/node_modules/@offckb/cli/target/devnet/ckb-miner.toml\nCKB output: 2024-03-20 07:56:44.765 +00:00 main INFO sentry  sentry is disabled\n\nCKB output: 2024-03-20 07:56:44.766 +00:00 main INFO ckb_bin::helper  raise_fd_limit newly-increased limit: 61440\n\nCKB output: 2024-03-20 07:56:44.854 +00:00 main INFO ckb_bin::subcommand::run  ckb version: 0.113.1 (95ad24b 2024-01-31)\n\nCKB output: 2024-03-20 07:56:45.320 +00:00 main INFO ckb_db_migration  Init database version 20230206163640\n\nCKB output: 2024-03-20 07:56:45.329 +00:00 main INFO ckb_launcher  Touch chain spec hash: Byte32(0x3036c73473a371f3aa61c588c38924a93fb8513e481fa7c8d884fc4cf5fd368a)\n"})})})]}),"\n",(0,a.jsx)(n.p,{children:"Open another terminal and check some pre-funded accounts, copy some private keys for later usage:"}),"\n",(0,a.jsxs)(c.A,{children:[(0,a.jsx)(o.A,{value:"offckb-accounts",label:"Command",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"offckb accounts\n"})})}),(0,a.jsx)(o.A,{value:"offckb-accounts-result",label:"Response",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"Print account list, each account is funded with 42_000_000_00000000 capacity in the genesis block.\n[\n  {\n    privkey: '0x6109170b275a09ad54877b82f7d9930f88cab5717d484fb4741ae9d1dd078cd6',\n    pubkey: '0x02025fa7b61b2365aa459807b84df065f1949d58c0ae590ff22dd2595157bffefa',\n    lockScript: {\n      codeHash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',\n      hashType: 'type',\n      args: '0x8e42b1999f265a0078503c4acec4d5e134534297'\n    },\n    address: 'ckt1qzda0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsqvwg2cen8extgq8s5puft8vf40px3f599cytcyd8',\n    args: '0x8e42b1999f265a0078503c4acec4d5e134534297'\n  },\n  {\n    privkey: '0x9f315d5a9618a39fdc487c7a67a8581d40b045bd7a42d83648ca80ef3b2cb4a1',\n    pubkey: '0x026efa0579f09cc7c1129b78544f70098c90b2ab155c10746316f945829c034a2d',\n    lockScript: {\n      codeHash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',\n      hashType: 'type',\n      args: '0x758d311c8483e0602dfad7b69d9053e3f917457d'\n    },\n    address: 'ckt1qzda0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsqt435c3epyrupszm7khk6weq5lrlyt52lg48ucew',\n    args: '0x758d311c8483e0602dfad7b69d9053e3f917457d'\n  },\n  #... \n]\n"})})})]}),"\n",(0,a.jsx)(n.hr,{})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}const u=function(e){return(0,s.createElement)(d,e)}},7227:(e,n,t)=>{t.d(n,{A:()=>c});t(6540);var s=t(8215);const a={tabItem:"tabItem_Ymn6"};var r=t(4848);function c(e){var n=e.children,t=e.hidden,c=e.className;return(0,r.jsx)("div",{role:"tabpanel",className:(0,s.A)(a.tabItem,c),hidden:t,children:n})}},9489:(e,n,t)=>{t.d(n,{A:()=>w});var s=t(6540),a=t(8215),r=t(4245),c=t(6347),o=t(6494),i=t(2814),l=t(5167),d=t(1269);function u(e){var n,t;return null!=(n=null==(t=s.Children.toArray(e).filter((function(e){return"\n"!==e})).map((function(e){if(!e||(0,s.isValidElement)(e)&&((n=e.props)&&"object"==typeof n&&"value"in n))return e;var n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:t.filter(Boolean))?n:[]}function h(e){var n=e.values,t=e.children;return(0,s.useMemo)((function(){var e=null!=n?n:function(e){return u(e).map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes,default:n.default}}))}(t);return function(e){var n=(0,l.X)(e,(function(e,n){return e.value===n.value}));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,t])}function p(e){var n=e.value;return e.tabValues.some((function(e){return e.value===n}))}function f(e){var n=e.queryString,t=void 0!==n&&n,a=e.groupId,r=(0,c.W6)(),o=function(e){var n=e.queryString,t=void 0!==n&&n,s=e.groupId;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=s?s:null}({queryString:t,groupId:a});return[(0,i.aZ)(o),(0,s.useCallback)((function(e){if(o){var n=new URLSearchParams(r.location.search);n.set(o,e),r.replace(Object.assign({},r.location,{search:n.toString()}))}}),[o,r])]}function m(e){var n,t,a,r,c=e.defaultValue,i=e.queryString,l=void 0!==i&&i,u=e.groupId,m=h(e),x=(0,s.useState)((function(){return function(e){var n,t=e.defaultValue,s=e.tabValues;if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:s}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+t+'" but none of its children has the corresponding value. Available values are: '+s.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return t}var a=null!=(n=s.find((function(e){return e.default})))?n:s[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:c,tabValues:m})})),b=x[0],g=x[1],j=f({queryString:l,groupId:u}),v=j[0],k=j[1],w=(n=function(e){return e?"docusaurus.tab."+e:null}({groupId:u}.groupId),t=(0,d.Dv)(n),a=t[0],r=t[1],[a,(0,s.useCallback)((function(e){n&&r.set(e)}),[n,r])]),y=w[0],S=w[1],C=function(){var e=null!=v?v:y;return p({value:e,tabValues:m})?e:null}();return(0,o.A)((function(){C&&g(C)}),[C]),{selectedValue:b,selectValue:(0,s.useCallback)((function(e){if(!p({value:e,tabValues:m}))throw new Error("Can't select invalid tab value="+e);g(e),k(e),S(e)}),[k,S,m]),tabValues:m}}var x=t(1062);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=t(4848);function j(e){var n=e.className,t=e.block,s=e.selectedValue,c=e.selectValue,o=e.tabValues,i=[],l=(0,r.a_)().blockElementScrollPositionUntilNextRender,d=function(e){var n=e.currentTarget,t=i.indexOf(n),a=o[t].value;a!==s&&(l(n),c(a))},u=function(e){var n,t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":var s,a=i.indexOf(e.currentTarget)+1;t=null!=(s=i[a])?s:i[0];break;case"ArrowLeft":var r,c=i.indexOf(e.currentTarget)-1;t=null!=(r=i[c])?r:i[i.length-1]}null==(n=t)||n.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},n),children:o.map((function(e){var n=e.value,t=e.label,r=e.attributes;return(0,g.jsx)("li",Object.assign({role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:function(e){return i.push(e)},onKeyDown:u,onClick:d},r,{className:(0,a.A)("tabs__item",b.tabItem,null==r?void 0:r.className,{"tabs__item--active":s===n}),children:null!=t?t:n}),n)}))})}function v(e){var n=e.lazy,t=e.children,a=e.selectedValue,r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){var c=r.find((function(e){return e.props.value===a}));return c?(0,s.cloneElement)(c,{className:"margin-top--md"}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:r.map((function(e,n){return(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==a})}))})}function k(e){var n=m(e);return(0,g.jsxs)("div",{className:(0,a.A)("tabs-container",b.tabList),children:[(0,g.jsx)(j,Object.assign({},e,n)),(0,g.jsx)(v,Object.assign({},e,n))]})}function w(e){var n=(0,x.A)();return(0,g.jsx)(k,Object.assign({},e,{children:u(e.children)}),String(n))}},8652:(e,n,t)=>{t.d(n,{A:()=>c});const s={box:"box_OmWe",bold:"bold_xF78",estimateTime:"estimateTime_dfR_"};var a=t(53),r=t(4848);function c(e){var n=e.estimateTime,t=e.whatYouWillLearn;return(0,r.jsxs)("div",{className:s.box,children:[(0,r.jsxs)("div",{className:(0,a.A)(s.estimateTime,s.bold),children:["Estimated time: ",n]}),(0,r.jsx)("div",{className:s.bold,children:"What you\u2019ll learn:"}),(0,r.jsx)("ul",{children:t.map((function(e){return(0,r.jsx)("li",{children:e},e)}))})]})}},53:(e,n,t)=>{function s(e){var n,t,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=s(e[n]))&&(a&&(a+=" "),a+=t);else for(n in e)e[n]&&(a&&(a+=" "),a+=n);return a}function a(){for(var e,n,t=0,a="";t<arguments.length;)(e=arguments[t++])&&(n=s(e))&&(a&&(a+=" "),a+=n);return a}t.d(n,{A:()=>a})},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>o});var s=t(6540);const a={},r=s.createContext(a);function c(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);