"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[174],{4656:(e,n,t)=>{t.d(n,{Ay:()=>i});var s=t(4848),a=t(8453);function r(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"So now your app works great on the local blockchain, you might want to switch it to different environments like Testnet and mainnet."}),"\n",(0,s.jsx)(n.p,{children:"To do this, you need to update the chain config and related code."}),"\n",(0,s.jsxs)(n.p,{children:["Open the ",(0,s.jsx)(n.code,{children:"ckb.ts"})," in your project root dir, change the ",(0,s.jsx)(n.code,{children:"lumosConfig"})," and ",(0,s.jsx)(n.code,{children:"CKB_RPC_URL"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"//export const lumosConfig: config.Config = devConfig as config.Config;\nexport const lumosConfig = config.predefined.AGGRON4 as config.Config;\n\n//export const CKB_RPC_URL = 'http://localhost:8114';\nexport const CKB_RPC_URL = \"https://testnet.ckb.dev/rpc\";\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Acutally, we have the corresponding Testnet version examples for all these tutorials. The source code of the Testnet version is in ",(0,s.jsx)(n.a,{href:"https://github.com/nervosnetwork/docs.nervos.org/tree/develop-v2/examples",children:"https://github.com/nervosnetwork/docs.nervos.org/tree/develop-v2/examples"}),", you can clone the repo and start running on Testnet."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"git clone https://github.com/nervosnetwork/docs.nervos.org.git\ncd docs.nervos.org.git/examples/<example-name>\nyarn && yarn start\n"})}),"\n",(0,s.jsxs)(n.p,{children:["For more details, check out the ",(0,s.jsx)(n.a,{href:"https://github.com/nervosnetwork/docs.nervos.org/blob/develop-v2/examples/simple-transfer/README.md",children:"README.md"}),";"]})]})}function i(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}},3890:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>f,frontMatter:()=>c,metadata:()=>d,toc:()=>h});var s=t(4848),a=t(8453),r=t(8652),i=t(3102),o=t(4656);const c={id:"write-message",title:"Write Message",sidebar_position:3},l="Write & Read On-Chain Message",d={id:"dapps/write-message",title:"Write Message",description:"<TutorialHeader",source:"@site/docs/dapps/write-message.mdx",sourceDirName:"dapps",slug:"/dapps/write-message",permalink:"/docs/dapps/write-message",draft:!1,unlisted:!1,editUrl:"https://github.com/nervosnetwork/docs-new/tree/develop-v2/website/docs/dapps/write-message.mdx",tags:[],version:"current",lastUpdatedAt:1712119922,formattedLastUpdatedAt:"Apr 3, 2024",sidebarPosition:3,frontMatter:{id:"write-message",title:"Write Message",sidebar_position:3},sidebar:"tutorial",previous:{title:"Transfer Balance",permalink:"/docs/dapps/transfer-balance"},next:{title:"Issue Token",permalink:"/docs/dapps/issue-token"}},u={},h=[{value:"Store &amp; Retrieve Cell Data",id:"store--retrieve-cell-data",level:2},{value:"Setup Devnet &amp; Run Example",id:"setup-devnet--run-example",level:2},{value:"Behind the Scene",id:"behind-the-scene",level:2},{value:"Encode &amp; Decode Message",id:"encode--decode-message",level:3},{value:"Build Transaction",id:"build-transaction",level:3},{value:"Read Cell Messages",id:"read-cell-messages",level:3},{value:"Congratulations!",id:"congratulations",level:2},{value:"Next Step",id:"next-step",level:2},{value:"Additional Resources",id:"additional-resources",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"write--read-on-chain-message",children:"Write & Read On-Chain Message"}),"\n",(0,s.jsx)(r.A,{estimateTime:"2 \u2013 5 min",whatYouWillLearn:["How to store data on cell","Write a text message on a cell","Read the text message from cell"]}),"\n",(0,s.jsx)(n.h2,{id:"store--retrieve-cell-data",children:"Store & Retrieve Cell Data"}),"\n",(0,s.jsxs)(n.p,{children:["In this tutorial, you'll learn how to tuck a nifty message - \"",(0,s.jsx)(n.strong,{children:"Hello CKB!"}),'" - into a ',(0,s.jsx)(n.a,{href:"https://docs.nervos.org/docs/reference/cell/",children:"cell"})," on the CKB blockchain. Imagine it as sending a message in a bottle, but the ocean is digital, and the bottle is a super secure, tamper-proof CKB cell!"]}),"\n",(0,s.jsxs)(n.p,{children:["As you have learned from the first tutorial ",(0,s.jsx)(n.a,{href:"/view-and-transfer-balance",children:"view and transfer balance"}),", the cell can store any type of data in the data field of Cell structure. Here we will put a text message encoding in hex string format and store it in the data field. Once your words are encoded and inscribed into the blockchain, we'll then get the hex string from the same cell back and then decode them to the original text message. the method of encoding and decoding is totally up to your favorite, we use the ",(0,s.jsx)(n.code,{children:"TextDecoder"})," for simplicity through the tutorial."]}),"\n",(0,s.jsx)(n.h2,{id:"setup-devnet--run-example",children:"Setup Devnet & Run Example"}),"\n",(0,s.jsx)(i.A,{templateName:"write-and-read-message",imageSrc:"img/dapps/write-message-dapp.jpg"}),"\n",(0,s.jsx)(n.h2,{id:"behind-the-scene",children:"Behind the Scene"}),"\n",(0,s.jsxs)(n.p,{children:["Open the ",(0,s.jsx)(n.code,{children:"lib.ts"})," file in your project, it lists all the important functions that do the most of work for the project."]}),"\n",(0,s.jsx)(n.h3,{id:"encode--decode-message",children:"Encode & Decode Message"}),"\n",(0,s.jsx)(n.p,{children:"Since Cell's data field can store any type of data, we need to design our encoding and decoding method for the message we want to read and write on-chain."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'export function utf8ToHex(utf8String: string): string {\n  const encoder = new TextEncoder();\n  const uint8Array = encoder.encode(utf8String);\n  return (\n    "0x" +\n    Array.prototype.map\n      .call(uint8Array, (byte: number) => {\n        return ("0" + (byte & 0xff).toString(16)).slice(-2);\n      })\n      .join("")\n  );\n}\n\nexport function hexToUtf8(hexString: string): string {\n  const decoder = new TextDecoder("utf-8");\n  const uint8Array = new Uint8Array(\n    hexString.match(/[\\da-f]{2}/gi)!.map((h) => parseInt(h, 16))\n  );\n  return decoder.decode(uint8Array);\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"build-transaction",children:"Build Transaction"}),"\n",(0,s.jsxs)(n.p,{children:["Now check out the core function ",(0,s.jsx)(n.code,{children:"buildMessageTx"}),". It accepts two parameters, one is your private key. One is the message you want to write into the cell, then it builds the transaction to get us a new cell that includes the message written in the data field."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export async function buildMessageTx(\n  onChainMemo: string,\n  privateKey: string\n): Promise<string> {\n...\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"As always, we first create a transaction skeleton:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"let txSkeleton = helpers.TransactionSkeleton({});\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then we build the output cell to store the message data by putting the hex format of the text message into the data field of the output cell:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const fromAccount = generateAccountFromPrivateKey(privateKey);\nconst onChainMemoHex: HexString = utf8ToHex(onChainMemo);\n\nconst messageOutput: Cell = {\n  cellOutput: {\n    lock: fromAccount.lockScript,\n    capacity: "0x0",\n  },\n  data: onChainMemoHex,\n};\nconst minimalCapacity = helpers.minimalCellCapacity(messageOutput);\nmessageOutput.cellOutput.capacity = BI.from(minimalCapacity).toHexString();\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Notice that we need to make sure the data stored in the cell won't overflow the total size of the cell's capacity. That's why we construct the content of the cell and then use ",(0,s.jsx)(n.code,{children:"helpers.minimalCellCapacity"})," to determine how much space we need for this cell."]}),"\n",(0,s.jsx)(n.p,{children:"Next, we add some transaction fees and calculate the total capacities we need and start collecting the input cells:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const neededCapacity = BI.from(minimalCapacity).add(100000);\nlet collectedSum = BI.from(0);\nconst collected: Cell[] = [];\nconst collector = indexer.collector({\n  lock: fromAccount.lockScript,\n  type: "empty",\n  // filter cells by output data len range, [inclusive, exclusive)\n  // data length range: [0, 1), which means the data length is 0\n  outputDataLenRange: ["0x0", "0x1"],\n});\nfor await (const cell of collector.collect()) {\n  collectedSum = collectedSum.add(cell.cellOutput.capacity);\n  collected.push(cell);\n  if (collectedSum >= neededCapacity) break;\n}\nif (collectedSum.lt(neededCapacity)) {\n  throw new Error(`Not enough CKB, ${collectedSum} < ${neededCapacity}`);\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Remember to build the change output cell to save our capacities:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const changeOutput: Cell = {\n  cellOutput: {\n    capacity: collectedSum.sub(neededCapacity).toHexString(),\n    lock: fromAccount.lockScript,\n  },\n  data: "0x",\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The next steps are just similar with the ",(0,s.jsx)(n.code,{children:"view-and-transfer-balance"})," example. We build the ",(0,s.jsx)(n.code,{children:"witnessArgs"})," for the transaction's witness and putting the signature in the witnessArgs:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const firstIndex = txSkeleton\n  .get("inputs")\n  .findIndex((input) =>\n    new ScriptValue(input.cellOutput.lock, { validate: false }).equals(\n      new ScriptValue(fromAccount.lockScript, { validate: false })\n    )\n  );\nif (firstIndex !== -1) {\n  while (firstIndex >= txSkeleton.get("witnesses").size) {\n    txSkeleton = txSkeleton.update("witnesses", (witnesses) =>\n      witnesses.push("0x")\n    );\n  }\n  let witness: string = txSkeleton.get("witnesses").get(firstIndex)!;\n  const newWitnessArgs: WitnessArgs = {\n    /* 65-byte zeros in hex */\n    lock: "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",\n  };\n  if (witness !== "0x") {\n    const witnessArgs = blockchain.WitnessArgs.unpack(bytes.bytify(witness));\n    const lock = witnessArgs.lock;\n    if (\n      !!lock &&\n      !!newWitnessArgs.lock &&\n      !bytes.equal(lock, newWitnessArgs.lock)\n    ) {\n      throw new Error(\n        "Lock field in first witness is set aside for signature!"\n      );\n    }\n    const inputType = witnessArgs.inputType;\n    if (inputType) {\n      newWitnessArgs.inputType = inputType;\n    }\n    const outputType = witnessArgs.outputType;\n    if (outputType) {\n      newWitnessArgs.outputType = outputType;\n    }\n  }\n  witness = bytes.hexify(blockchain.WitnessArgs.pack(newWitnessArgs));\n  txSkeleton = txSkeleton.update("witnesses", (witnesses) =>\n    witnesses.set(firstIndex, witness)\n  );\n}\ntxSkeleton = commons.common.prepareSigningEntries(txSkeleton);\nconst message = txSkeleton.get("signingEntries").get(0)!.message;\nconst Sig = hd.key.signRecoverable(message!, privateKey);\nconst tx = helpers.sealTransaction(txSkeleton, [Sig]);\n'})}),"\n",(0,s.jsx)(n.p,{children:"Lastly, we broadcast the transaction to the blockchain network through rpc:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const txHash = await rpc.sendTransaction(tx, "passthrough");\n'})}),"\n",(0,s.jsx)(n.p,{children:"Therefore, the message is successfully stored on a cell and lives in the blockchain."}),"\n",(0,s.jsx)(n.h3,{id:"read-cell-messages",children:"Read Cell Messages"}),"\n",(0,s.jsx)(n.p,{children:"To read the message we stored on-chain, we need to retrieve the live cell we just produced, read the data field from the cell and decode the message back to the text format."}),"\n",(0,s.jsxs)(n.p,{children:["To retrieve a specific live cell, we use the RPC method ",(0,s.jsx)(n.code,{children:"getLiveCell"})," with ",(0,s.jsx)(n.code,{children:"OutPoint"})," parameters, which are the ",(0,s.jsx)(n.code,{children:"txHash"})," and the ",(0,s.jsx)(n.code,{children:"output cell index"}),". Given a specific transaction hash, we can locate the output cells of the transaction. By knowing the position index of the cell, we can find out the specific one."]}),"\n",(0,s.jsxs)(n.p,{children:["For the way we built the transaction, we know that the live cell that carries the message is always the first one of the output cells. So we set ",(0,s.jsx)(n.code,{children:'index = "0x0"'})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'export async function readOnChainMessage(txHash: string, index = "0x0") {\n  const { cell } = await rpc.getLiveCell({ txHash, index }, true);\n  if (cell == null) {\n    return alert("cell not found, please retry later");\n  }\n  const data = cell.data.content;\n  const msg = hexToUtf8(data);\n  alert("read msg: " + msg);\n  return msg;\n}\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"congratulations",children:"Congratulations!"}),"\n",(0,s.jsx)(n.p,{children:"By following this tutorial this far, you have mastered how storing data on cells works on CKB. Here's a quick recap:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["We can store arbitrary data in the ",(0,s.jsx)(n.code,{children:"data"})," field of Cell."]}),"\n",(0,s.jsx)(n.li,{children:"We need a way to encode and decode our data for understanding and using our raw on-chain data later."}),"\n",(0,s.jsxs)(n.li,{children:["To read the storing data, we need to locate the live cell that we put our data in. This can be done by querying cells meets our requirement or by getting the cell directly with a known ",(0,s.jsx)(n.code,{children:"OutPoint"})," through RPC."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"next-step",children:"Next Step"}),"\n",(0,s.jsx)(o.Ay,{}),"\n",(0,s.jsx)(n.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["CKB transaction structure: ",(0,s.jsx)(n.a,{href:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0022-transaction-structure/0022-transaction-structure.md",children:"RFC-0022-transaction-structure"})]}),"\n",(0,s.jsxs)(n.li,{children:["CKB data structure basics: ",(0,s.jsx)(n.a,{href:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0019-data-structures/0019-data-structures.md",children:"RFC-0019-data-structure"}),"\n./SetupProject.js\n./SetupProject.js\n./SetupProject.js"]}),"\n"]})]})}function f(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},3102:(e,n,t)=>{t.d(n,{A:()=>u});var s=t(6540),a=t(4848),r=t(8453),i=t(9489),o=t(7227),c=t(8180);function l(e){const n={a:"a",code:"code",h3:"h3",hr:"hr",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["To begin, you'll need to install ",(0,a.jsx)(n.code,{children:"@offckb/cli"})," to establish a local dev environment and initialize the project."]}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsx)(o.A,{value:"offckb-install",label:"Command",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install -g @offckb/cli\n"})})}),(0,a.jsx)(o.A,{value:"offckb-install-result",label:"Response",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"changed 106 packages in 17s\n\n11 packages are looking for funding\nrun `npm fund` for details\n"})})})]}),"\n",(0,a.jsxs)(n.p,{children:["Use ",(0,a.jsx)(n.code,{children:"offckb"})," to select the ",(0,a.jsx)("code",{children:e.templateName})," template to init the project to your local environment"]}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsx)(o.A,{value:"offckb-init",label:"Command",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"offckb init <project-name>\n"})})}),(0,a.jsx)(o.A,{value:"offckb-init-result",label:"Response",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"? Select a dapp template (Use arrow keys)\n  View and Transfer Balance\n  Issue Token via xUDT scripts\n\u276f Write and Read On-Chain Message\na simple dapp to write and read text message from blockchain via storing it in cells\ninit CKB dapp project: /Users/ckb/Desktop/offckb/<project-name>\n\u2728  Done in 2.52s.\n"})})})]}),"\n",(0,a.jsx)(n.p,{children:"Install node dependencies and start the example app:"}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsx)(o.A,{value:"offckb-yarn-start",label:"Command",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cd <project-name> && yarn && yarn start\n"})})}),(0,a.jsx)(o.A,{value:"offckb-yarn-start-result",label:"Response",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"$ parcel index.html\nServer running at http://localhost:1234\n\u2728 Built in 66ms\n"})})})]}),"\n",(0,a.jsxs)(n.p,{children:["Now, the app is running in ",(0,a.jsx)(n.a,{href:"http://localhost:1234",children:"http://localhost:1234"})]}),"\n",(0,a.jsx)("img",{src:(0,c.A)(e.imageSrc)}),"\n",(0,a.jsx)(n.h3,{id:"start-the-devnet",children:"Start the Devnet"}),"\n",(0,a.jsx)(n.p,{children:"In order to interact with the app, you need to start the devnet and check some accounts to use."}),"\n",(0,a.jsx)(n.p,{children:"Open one terminal and start the devnet:"}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsx)(o.A,{value:"offckb-node",label:"Command",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"offckb node\n"})})}),(0,a.jsx)(o.A,{value:"offckb-node-result",label:"Response",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"/bin/sh: /Users/nervosDocs/.nvm/versions/node/v18.12.1/lib/node_modules/@offckb/cli/target/ckb/ckb: No such file or directory\n/Users/nervosDocs/.nvm/versions/node/v18.12.1/lib/node_modules/@offckb/cli/target/ckb/ckb not found, download and install the new version 0.113.1..\nCKB installed successfully.\ninit devnet config folder: /Users/nervosDocs/.nvm/versions/node/v18.12.1/lib/node_modules/@offckb/cli/target/devnet\nmodified  /Users/nervosDocs/.nvm/versions/node/v18.12.1/lib/node_modules/@offckb/cli/target/devnet/ckb-miner.toml\nCKB output: 2024-03-20 07:56:44.765 +00:00 main INFO sentry  sentry is disabled\n\nCKB output: 2024-03-20 07:56:44.766 +00:00 main INFO ckb_bin::helper  raise_fd_limit newly-increased limit: 61440\n\nCKB output: 2024-03-20 07:56:44.854 +00:00 main INFO ckb_bin::subcommand::run  ckb version: 0.113.1 (95ad24b 2024-01-31)\n\nCKB output: 2024-03-20 07:56:45.320 +00:00 main INFO ckb_db_migration  Init database version 20230206163640\n\nCKB output: 2024-03-20 07:56:45.329 +00:00 main INFO ckb_launcher  Touch chain spec hash: Byte32(0x3036c73473a371f3aa61c588c38924a93fb8513e481fa7c8d884fc4cf5fd368a)\n"})})})]}),"\n",(0,a.jsx)(n.p,{children:"Open another terminal and check some pre-funded accounts, copy some private keys for later usage:"}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsx)(o.A,{value:"offckb-accounts",label:"Command",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"offckb accounts\n"})})}),(0,a.jsx)(o.A,{value:"offckb-accounts-result",label:"Response",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"Print account list, each account is funded with 42_000_000_00000000 capacity in the genesis block.\n[\n  {\n    privkey: '0x6109170b275a09ad54877b82f7d9930f88cab5717d484fb4741ae9d1dd078cd6',\n    pubkey: '0x02025fa7b61b2365aa459807b84df065f1949d58c0ae590ff22dd2595157bffefa',\n    lockScript: {\n      codeHash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',\n      hashType: 'type',\n      args: '0x8e42b1999f265a0078503c4acec4d5e134534297'\n    },\n    address: 'ckt1qzda0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsqvwg2cen8extgq8s5puft8vf40px3f599cytcyd8',\n    args: '0x8e42b1999f265a0078503c4acec4d5e134534297'\n  },\n  {\n    privkey: '0x9f315d5a9618a39fdc487c7a67a8581d40b045bd7a42d83648ca80ef3b2cb4a1',\n    pubkey: '0x026efa0579f09cc7c1129b78544f70098c90b2ab155c10746316f945829c034a2d',\n    lockScript: {\n      codeHash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',\n      hashType: 'type',\n      args: '0x758d311c8483e0602dfad7b69d9053e3f917457d'\n    },\n    address: 'ckt1qzda0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsqt435c3epyrupszm7khk6weq5lrlyt52lg48ucew',\n    args: '0x758d311c8483e0602dfad7b69d9053e3f917457d'\n  },\n  #... \n]\n"})})})]}),"\n",(0,a.jsx)(n.hr,{})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}const u=function(e){return(0,s.createElement)(d,e)}},7227:(e,n,t)=>{t.d(n,{A:()=>i});t(6540);var s=t(8215);const a={tabItem:"tabItem_Ymn6"};var r=t(4848);function i(e){var n=e.children,t=e.hidden,i=e.className;return(0,r.jsx)("div",{role:"tabpanel",className:(0,s.A)(a.tabItem,i),hidden:t,children:n})}},9489:(e,n,t)=>{t.d(n,{A:()=>y});var s=t(6540),a=t(8215),r=t(4245),i=t(6347),o=t(6494),c=t(2814),l=t(5167),d=t(1269);function u(e){var n,t;return null!=(n=null==(t=s.Children.toArray(e).filter((function(e){return"\n"!==e})).map((function(e){if(!e||(0,s.isValidElement)(e)&&((n=e.props)&&"object"==typeof n&&"value"in n))return e;var n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:t.filter(Boolean))?n:[]}function h(e){var n=e.values,t=e.children;return(0,s.useMemo)((function(){var e=null!=n?n:function(e){return u(e).map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes,default:n.default}}))}(t);return function(e){var n=(0,l.X)(e,(function(e,n){return e.value===n.value}));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,t])}function p(e){var n=e.value;return e.tabValues.some((function(e){return e.value===n}))}function f(e){var n=e.queryString,t=void 0!==n&&n,a=e.groupId,r=(0,i.W6)(),o=function(e){var n=e.queryString,t=void 0!==n&&n,s=e.groupId;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=s?s:null}({queryString:t,groupId:a});return[(0,c.aZ)(o),(0,s.useCallback)((function(e){if(o){var n=new URLSearchParams(r.location.search);n.set(o,e),r.replace(Object.assign({},r.location,{search:n.toString()}))}}),[o,r])]}function m(e){var n,t,a,r,i=e.defaultValue,c=e.queryString,l=void 0!==c&&c,u=e.groupId,m=h(e),g=(0,s.useState)((function(){return function(e){var n,t=e.defaultValue,s=e.tabValues;if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:s}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+t+'" but none of its children has the corresponding value. Available values are: '+s.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return t}var a=null!=(n=s.find((function(e){return e.default})))?n:s[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:i,tabValues:m})})),x=g[0],b=g[1],v=f({queryString:l,groupId:u}),j=v[0],w=v[1],y=(n=function(e){return e?"docusaurus.tab."+e:null}({groupId:u}.groupId),t=(0,d.Dv)(n),a=t[0],r=t[1],[a,(0,s.useCallback)((function(e){n&&r.set(e)}),[n,r])]),k=y[0],C=y[1],A=function(){var e=null!=j?j:k;return p({value:e,tabValues:m})?e:null}();return(0,o.A)((function(){A&&b(A)}),[A]),{selectedValue:x,selectValue:(0,s.useCallback)((function(e){if(!p({value:e,tabValues:m}))throw new Error("Can't select invalid tab value="+e);b(e),w(e),C(e)}),[w,C,m]),tabValues:m}}var g=t(1062);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(4848);function v(e){var n=e.className,t=e.block,s=e.selectedValue,i=e.selectValue,o=e.tabValues,c=[],l=(0,r.a_)().blockElementScrollPositionUntilNextRender,d=function(e){var n=e.currentTarget,t=c.indexOf(n),a=o[t].value;a!==s&&(l(n),i(a))},u=function(e){var n,t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":var s,a=c.indexOf(e.currentTarget)+1;t=null!=(s=c[a])?s:c[0];break;case"ArrowLeft":var r,i=c.indexOf(e.currentTarget)-1;t=null!=(r=c[i])?r:c[c.length-1]}null==(n=t)||n.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},n),children:o.map((function(e){var n=e.value,t=e.label,r=e.attributes;return(0,b.jsx)("li",Object.assign({role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:function(e){return c.push(e)},onKeyDown:u,onClick:d},r,{className:(0,a.A)("tabs__item",x.tabItem,null==r?void 0:r.className,{"tabs__item--active":s===n}),children:null!=t?t:n}),n)}))})}function j(e){var n=e.lazy,t=e.children,a=e.selectedValue,r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){var i=r.find((function(e){return e.props.value===a}));return i?(0,s.cloneElement)(i,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:r.map((function(e,n){return(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==a})}))})}function w(e){var n=m(e);return(0,b.jsxs)("div",{className:(0,a.A)("tabs-container",x.tabList),children:[(0,b.jsx)(v,Object.assign({},e,n)),(0,b.jsx)(j,Object.assign({},e,n))]})}function y(e){var n=(0,g.A)();return(0,b.jsx)(w,Object.assign({},e,{children:u(e.children)}),String(n))}},8652:(e,n,t)=>{t.d(n,{A:()=>i});const s={box:"box_OmWe",bold:"bold_xF78",estimateTime:"estimateTime_dfR_"};var a=t(53),r=t(4848);function i(e){var n=e.estimateTime,t=e.whatYouWillLearn;return(0,r.jsxs)("div",{className:s.box,children:[(0,r.jsxs)("div",{className:(0,a.A)(s.estimateTime,s.bold),children:["Estimated time: ",n]}),(0,r.jsx)("div",{className:s.bold,children:"What you\u2019ll learn:"}),(0,r.jsx)("ul",{children:t.map((function(e){return(0,r.jsx)("li",{children:e},e)}))})]})}},53:(e,n,t)=>{function s(e){var n,t,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=s(e[n]))&&(a&&(a+=" "),a+=t);else for(n in e)e[n]&&(a&&(a+=" "),a+=n);return a}function a(){for(var e,n,t=0,a="";t<arguments.length;)(e=arguments[t++])&&(n=s(e))&&(a&&(a+=" "),a+=n);return a}t.d(n,{A:()=>a})},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(6540);const a={},r=s.createContext(a);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);